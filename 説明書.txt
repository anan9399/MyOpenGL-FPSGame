ゲーム操作:
WASD :移動　SPACE:ジャンプ　F:トーチを点灯する/消す MOUSE LEFT:  発砲する 
R: リロード　num1:小銃に切り替える　num2:狙撃銃に切り替える　num3:拳に切り替える


プレイヤーの武器:
小銃：攻撃力が低いが弾薬が多い、攻撃速度が早い。敵を少し後退させる。
狙撃銃：攻撃力が高いが弾薬が少ない、攻撃速度が遅い。敵を少し後退させる。
拳：攻撃力がないが、弾薬無制限。敵を大きく後退させる。
プレイヤーが移動している時、銃のモデルは大きく揺れる。静止時、銃のモデルは少し揺れる。

敵の種類:
普通の敵: 徐々にプレイヤーに近づき、近距離から攻撃を仕掛けてくる。
上位の敵: 徐々にプレイヤーに近づき、遠距離から攻撃を仕掛けてくる。パーティクルエフェクトが持つ。

現在のゲーム内では武器と敵は適切なモデルを見つけていないので、すべて同一キューブモデルを利用している。



地形の生成:
　ブロックの頂点のｙ座標をテキストに保存する。ｙ座標の可視化とマニュアルチューニングができる。ブロック内でのピクセルのｙ座標は、頂点xz座標の比率を通して調整し、不連続性を消した。最初にゲームを起動して地形を作るときに、一度だけコードを実行すれば済ので、プレイ時はリソースの消費が少ない。このようなことを通して、地形の編集が簡単にできるになったと同時に不連続性が見られなくなった。

照星の描画：
　シーンをすべてレンダリングし終わった後、ディープテストを閉じて、フレームバッファの処理を行う。最後、照星を描画する。このようなことで、シーンによって照星が遮れることを避けた。描画についてはGeometry Shaderではなく、テクスチャで実装した。

当たり判定:
　UnityエンジンのRaycastを参考して実現した。プレイヤーからレイヤーを発射し、そのレイヤーで当たり判定を制御する。

工夫する点:
　描画が消費するリソースを削減するため、石や草など描画の発生回数が多いオブジェクトはInstancingを採用した。必要なデータを一度だけGPUに送り、その後、インスタンスの描画方法をGPUに指示しれば、1回のレンダリングで複数のオブジェクトを描画できる。
　リアルな地形を表現するため、Blend mapを利用して、3種類のテクスチャを混合して貼り付ける方法を採用した。3種類のテクスチャを表す三次元の情報はそれぞれRGB三原色の情報に変えた。もう一枚RGB三色しかない画像を用意して、その画像のRGB情報から、テクスチャの貼る場所を決める。このようなことを通して、異なるテクスチャ間のより良い変化を可能にする。テクスチャーはよりリアルに見え、もっと精細的な地形ができる。


将来の目標:
1、irrKlangを導入して、サンドエフェクトとBGMを実装する。
2、反射できる水面を実装する。
3、敵と銃のモデルを制作し、導入する。
